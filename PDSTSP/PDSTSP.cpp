#include "ilcplex/ilocplex.h" 
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <stdexcept> 
using namespace std;

int processFile(const string& filename, int UAVs) {
    try {
        vector<vector<double>> tau;
        vector<vector<double>> tauprime;
        vector<double> Cprime;

        // Read tau.csv
        ifstream file(filename + "/tau.csv");
        if (!file.is_open()) {
            throw runtime_error("Unable to open " + filename + "_tau.csv file.");
        }
        string line;
        while (getline(file, line)) {
            vector<double> row;
            stringstream ss(line);
            string value;
            while (getline(ss, value, ',')) {
                row.push_back(stod(value));
            }
            tau.push_back(row);
        }
        file.close();

        // Read tauprime.csv
        ifstream file2(filename + "/tauprime.csv");
        if (!file2.is_open()) {
            throw runtime_error("Unable to open " + filename + "_tauprime.csv file.");
        }
        string line2;
        while (getline(file2, line2)) {
            vector<double> row2;
            stringstream ss2(line2);
            string value2;
            while (getline(ss2, value2, ',')) {
                row2.push_back(stod(value2) * 2);
            }
            tauprime.push_back(row2);
        }
        file2.close();

        // Read Cprime.csv
        ifstream file3(filename + "/Cprime.csv");
        if (!file3.is_open()) {
            throw runtime_error("Unable to open " + filename + "_Cprime.csv file.");
        }
        string line3;
        while (getline(file3, line3)) {
            stringstream ss3(line3);
            string value3;
            while (getline(ss3, value3, ',')) {
                Cprime.push_back(stod(value3));
            }
        }
        file3.close();

        int n = tau.size(); // n = c+2

        for (int idx = Cprime.size() - 1; idx >= 0; idx--) {
            if ((tauprime[0][Cprime[idx]]) > 30) {
                Cprime.erase(Cprime.begin() + idx);
            }
        }

        IloEnv env;
        IloModel model(env);

        IloNumVar Z(env);
        IloExpr z(env);
        z = Z;
        model.add(IloMinimize(env, z));

        // Decision variable x[i][j]
        IloArray<IloBoolVarArray> x(env, n - 1);
        for (int i = 0; i < n - 1; i++) {
            x[i] = IloBoolVarArray(env, n);
        }

        // Decision variable y[i][v]
        IloArray<IloBoolVarArray> y(env, n);
        for (int i = 0; i < n; i++) {
            y[i] = IloBoolVarArray(env, UAVs);
        }

        // Constraint s1
        IloExpr st1(env);
        for (int i = 0; i < n - 1; i++) {
            for (int j = 1; j < n; j++) {
                if (j != i)
                    st1 += tau[i][j] * x[i][j];
            }
        }
        model.add(Z >= st1);
        st1.end();

        // Constraint s2
        IloExpr st2(env);
        for (int v = 0; v < UAVs; v++) {
            for (int i = 0; i < n; i++) {
                for (int c : Cprime) {
                    if (i == c) {
                        st2 += (tauprime[0][i] + tauprime[i][n - 1]) * y[i][v];
                        break;
                    }
                }
            }
        }
        model.add(Z >= st2);
        st2.end();

        // Constraint s3
        for (int j = 1; j < n - 1; j++) {
            IloExpr st3(env);
            for (int i = 0; i < n - 1; i++) {
                if (i != j) {
                    st3 += x[i][j];
                }
            }
            for (int v = 0; v < UAVs; v++) {
                for (int c : Cprime) {
                    if (j == c) {
                        st3 += y[j][v];
                        break;
                    }
                }
            }
            model.add(st3 == 1);
        }

        // Constraint s4
        IloExpr st4(env);
        for (int i = 1; i < n; i++) {
            st4 += x[0][i];
        }
        model.add(st4 == 1);
        st4.end();

        // Constraint s5
        IloExpr st5(env);
        for (int i = 0; i < n - 1; i++) {
            st5 += x[i][n - 1];
        }
        model.add(st5 == 1);
        st5.end();

        // Constraint s6
        for (int j = 1; j < n - 1; j++) {
            IloExpr st6(env);
            IloExpr st7(env);
            for (int i = 0; i < n - 1; i++) {
                if (i != j) {
                    st6 += x[i][j];
                }
            }
            for (int k = 1; k < n; k++) {
                if (k != j) {
                    st7 += x[j][k];
                }
            }
            model.add(st6 == st7);
        }

        // Constraint s7
        IloNumVarArray u(env, n, 1, n, ILOINT);
        for (int i = 1; i < n - 1; i++) {
            for (int j = 1; j < n; j++) {
                if (j != i) {
                    model.add(u[i] - u[j] + 1 <= n * (1 - x[i][j]));
                }
            }
        }

        IloCplex cplex(env);
        cplex.extract(model);
        if (!cplex.solve()) {
            throw runtime_error("Failed to solve the model.");
        }
        double objValue = cplex.getObjValue();

        cplex.clear();
        env.end();
        return objValue;
    }
    catch (const IloException& e) {
        cerr << "CPLEX Error: " << e.getMessage() << endl;
    }
    catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }
    catch (...) {
        cerr << "An unexpected error occurred." << endl;
    }
}

int main() {
    vector<string> inputs = {
        "20140813T124847|1", "20140813T124847|2", "20140813T124847|3", "20140813T124849|1",
        "20140813T124849|2", "20140813T124849|3", "20140813T124853|1", "20140813T124853|2",
        "20140813T124853|3", "20140813T124856|1", "20140813T124856|2", "20140813T124856|3",
        "20140813T124858|1", "20140813T124858|2", "20140813T124858|3", "20140813T124902|1",
        "20140813T124902|2", "20140813T124902|3", "20140813T124907|1", "20140813T124907|2",
        "20140813T124907|3", "20140813T124909|1", "20140813T124909|2", "20140813T124909|3",
        "20140813T124912|1", "20140813T124912|2", "20140813T124912|3", "20140813T124915|1",
        "20140813T124915|2", "20140813T124915|3", "20140813T124917|1", "20140813T124917|2",
        "20140813T124917|3", "20140813T124920|1", "20140813T124920|2", "20140813T124920|3",
        "20140813T124922|1", "20140813T124922|2", "20140813T124922|3", "20140813T124924|1",
        "20140813T124924|2", "20140813T124924|3", "20140813T124926|1", "20140813T124926|2",
        "20140813T124926|3", "20140813T124928|1", "20140813T124928|2", "20140813T124928|3",
        "20140813T124931|1", "20140813T124931|2", "20140813T124931|3", "20140813T124933|1",
        "20140813T124933|2", "20140813T124933|3", "20140813T124935|1", "20140813T124935|2",
        "20140813T124935|3", "20140813T124937|1", "20140813T124937|2", "20140813T124937|3",
        "20140813T124939|1", "20140813T124939|2", "20140813T124939|3", "20140813T124941|1",
        "20140813T124941|2", "20140813T124941|3", "20140813T124944|1", "20140813T124944|2",
        "20140813T124944|3", "20140813T124946|1", "20140813T124946|2", "20140813T124946|3",
        "20140813T124948|1", "20140813T124948|2", "20140813T124948|3", "20140813T124950|1",
        "20140813T124950|2", "20140813T124950|3", "20140813T124952|1", "20140813T124952|2",
        "20140813T124952|3", "20140813T124954|1", "20140813T124954|2", "20140813T124954|3",
        "20140813T124957|1", "20140813T124957|2", "20140813T124957|3", "20140813T124959|1",
        "20140813T124959|2", "20140813T124959|3", "20140813T125001|1", "20140813T125001|2",
        "20140813T125001|3", "20140813T125003|1", "20140813T125003|2", "20140813T125003|3",
        "20140813T125006|1", "20140813T125006|2", "20140813T125006|3", "20140813T125008|1",
        "20140813T125008|2", "20140813T125008|3", "20140813T125010|1", "20140813T125010|2",
        "20140813T125010|3", "20140813T125012|1", "20140813T125012|2", "20140813T125012|3",
        "20140813T125015|1", "20140813T125015|2", "20140813T125015|3", "20140813T125017|1",
        "20140813T125017|2", "20140813T125017|3", "20140813T125020|1", "20140813T125020|2",
        "20140813T125020|3", "20140813T125022|1", "20140813T125022|2", "20140813T125022|3",
        "20140813T125025|1", "20140813T125025|2", "20140813T125025|3", "20140813T125027|1",
        "20140813T125027|2", "20140813T125027|3", "20140813T125030|1", "20140813T125030|2",
        "20140813T125030|3", "20140813T125032|1", "20140813T125032|2", "20140813T125032|3",
        "20140813T125034|1", "20140813T125034|2", "20140813T125034|3", "20140813T125036|1",
        "20140813T125036|2", "20140813T125036|3", "20140813T125039|1", "20140813T125039|2",
        "20140813T125039|3", "20140813T125041|1", "20140813T125041|2", "20140813T125041|3",
        "20140813T125044|1", "20140813T125044|2", "20140813T125044|3", "20140813T125047|1",
        "20140813T125047|2", "20140813T125047|3", "20140813T125049|1", "20140813T125049|2",
        "20140813T125049|3", "20140813T125051|1", "20140813T125051|2", "20140813T125051|3",
        "20140813T125053|1", "20140813T125053|2", "20140813T125053|3", "20140813T125055|1",
        "20140813T125055|2", "20140813T125055|3", "20140813T125057|1", "20140813T125057|2",
        "20140813T125057|3", "20140813T125059|1", "20140813T125059|2", "20140813T125059|3",
        "20140813T125102|1", "20140813T125102|2", "20140813T125102|3", "20140813T125104|1",
        "20140813T125104|2", "20140813T125104|3", "20140813T125106|1", "20140813T125106|2",
        "20140813T125106|3", "20140813T125108|1", "20140813T125108|2", "20140813T125108|3",
        "20140813T125110|1", "20140813T125110|2", "20140813T125110|3", "20140813T125112|1",
        "20140813T125112|2", "20140813T125112|3", "20140813T125115|1", "20140813T125115|2",
        "20140813T125115|3", "20140813T125117|1", "20140813T125117|2", "20140813T125117|3",
        "20140813T125119|1", "20140813T125119|2", "20140813T125119|3", "20140813T125121|1",
        "20140813T125121|2", "20140813T125121|3", "20140813T125123|1", "20140813T125123|2",
        "20140813T125123|3", "20140813T125125|1", "20140813T125125|2", "20140813T125125|3",
        "20140813T125127|1", "20140813T125127|2", "20140813T125127|3", "20140813T125130|1",
        "20140813T125130|2", "20140813T125130|3", "20140813T125132|1", "20140813T125132|2",
        "20140813T125132|3", "20140813T125134|1", "20140813T125134|2", "20140813T125134|3",
        "20140813T125136|1", "20140813T125136|2", "20140813T125136|3", "20140813T125138|1",
        "20140813T125138|2", "20140813T125138|3", "20140813T125141|1", "20140813T125141|2",
        "20140813T125141|3", "20140813T125143|1", "20140813T125143|2", "20140813T125143|3",
        "20140813T125145|1", "20140813T125145|2", "20140813T125145|3", "20140813T125148|1",
        "20140813T125148|2", "20140813T125148|3", "20140813T125150|1", "20140813T125150|2",
        "20140813T125150|3", "20140813T125152|1", "20140813T125152|2", "20140813T125152|3",
        "20140813T125154|1", "20140813T125154|2", "20140813T125154|3", "20140813T125156|1",
        "20140813T125156|2", "20140813T125156|3", "20140813T125159|1", "20140813T125159|2",
        "20140813T125159|3", "20140813T125201|1", "20140813T125201|2", "20140813T125201|3",
        "20140813T125203|1", "20140813T125203|2", "20140813T125203|3", "20140813T125205|1",
        "20140813T125205|2", "20140813T125205|3", "20140813T125207|1", "20140813T125207|2",
        "20140813T125207|3", "20140813T125209|1", "20140813T125209|2", "20140813T125209|3",
        "20140813T125212|1", "20140813T125212|2", "20140813T125212|3", "20140813T125214|1",
        "20140813T125214|2", "20140813T125214|3", "20140813T125216|1", "20140813T125216|2",
        "20140813T125216|3", "20140813T125218|1", "20140813T125218|2", "20140813T125218|3",
        "20140813T125220|1", "20140813T125220|2", "20140813T125220|3", "20140813T125223|1",
        "20140813T125223|2", "20140813T125223|3", "20140813T125225|1", "20140813T125225|2",
        "20140813T125225|3", "20140813T125227|1", "20140813T125227|2", "20140813T125227|3",
        "20140813T125229|1", "20140813T125229|2", "20140813T125229|3", "20140813T125231|1",
        "20140813T125231|2", "20140813T125231|3", "20140813T125233|1", "20140813T125233|2",
        "20140813T125233|3", "20140813T125235|1", "20140813T125235|2", "20140813T125235|3",
        "20140813T125238|1", "20140813T125238|2", "20140813T125238|3", "20140813T125240|1",
        "20140813T125240|2", "20140813T125240|3", "20140813T125242|1", "20140813T125242|2",
        "20140813T125242|3", "20140813T125244|1", "20140813T125244|2", "20140813T125244|3",
        "20140813T125246|1", "20140813T125246|2", "20140813T125246|3", "20140813T125248|1",
        "20140813T125248|2", "20140813T125248|3", "20140813T125250|1", "20140813T125250|2",
        "20140813T125250|3", "20140813T125252|1", "20140813T125252|2", "20140813T125252|3",
        "20140813T125255|1", "20140813T125255|2", "20140813T125255|3", "20140813T125257|1",
        "20140813T125257|2", "20140813T125257|3", "20140813T125306|1", "20140813T125306|2",
        "20140813T125306|3", "20140813T125310|1", "20140813T125310|2", "20140813T125310|3",
        "20140813T125312|1", "20140813T125312|2", "20140813T125312|3", "20140813T125321|1",
        "20140813T125321|2", "20140813T125321|3", "20140813T125324|1", "20140813T125324|2",
        "20140813T125324|3", "20140813T125330|1", "20140813T125330|2", "20140813T125330|3",
        "20140813T125334|1", "20140813T125334|2", "20140813T125334|3", "20140813T125336|1",
        "20140813T125336|2", "20140813T125336|3", "20140813T125345|1", "20140813T125345|2",
        "20140813T125345|3", "20140813T125351|1", "20140813T125351|2"
    };

    ofstream outFile("pdstsp.csv");
    outFile << "Filename,Obj,Runtime\n";

    for (const auto& input : inputs) {
        stringstream ss(input);
        string filename;
        int numUAVs;

        getline(ss, filename, '|');
        ss >> numUAVs;
		int duration = 0; 

        

        outFile << input << ",";
        outFile << processFile(filename,numUAVs) << ",";
        outFile << duration << "ms\n";
    }

    outFile.close();
    cout << "Results written to pdstsp.csv\n";
    return 0;
}
